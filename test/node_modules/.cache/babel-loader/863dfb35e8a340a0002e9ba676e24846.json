{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_Projects\\\\loblaw-ui-test\\\\test\\\\src\\\\components\\\\dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\"; // import 'bootstrap/dist/css/bootstrap.min.css';\n// import { Table,Container, Row, Col } from 'react-bootstrap';\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getCampaignDetails } from \"../store/actions/campaign\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport IconButton from '@material-ui/core/IconButton'; // import StarBorderIcon from '@material-ui/icons/StarBorder';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: 'red'\n  },\n  gridList: {\n    width: 500,\n    height: 450\n  }\n}));\n\nfunction Dashboard(props) {\n  _s();\n\n  const classes = useStyles();\n  const campaignId = props.location.campaigns.id;\n  const campaign = props.location.campaigns;\n  let api_url = \"http://localhost:4000/campaigns\"; //TODO : for store\n  //   const dispatch = useDispatch();\n  //   const [campaignDetails, setCampaign] = useState();\n  //   const campaignData = useSelector((state) => state.campaignState.campaignDetails)\n  //   useEffect(() => {\n  //     if (campaignId) {\n  //         dispatch(getCampaignDetails(campaign, 0))\n  //     }\n  // }, [campaignDetails, dispatch])\n\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await fetch(api_url + '/' + campaignId + '?number=' + 0).then(response => {\n        console.log(response);\n        return response.json();\n      }).catch(err => {\n        throw new Error(err);\n      });\n      setData(result);\n    };\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(GridList, {\n      className: classes.gridList,\n      cols: 2.5,\n      children: [console.log(data), /*#__PURE__*/_jsxDEV(GridListTile, {\n        children: /*#__PURE__*/_jsxDEV(GridListTileBar, {\n          title: data.impressions,\n          classes: {\n            root: classes.titleBar,\n            title: classes.title\n          },\n          actionIcon: /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": `star ${data.impressions}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"QDDCSAe0uXoJ7FZ+7kOFOZZsHaA=\", false, function () {\n  return [useStyles];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["D:/React_Projects/loblaw-ui-test/test/src/components/dashboard.js"],"names":["React","useState","useEffect","useRef","useDispatch","useSelector","getCampaignDetails","makeStyles","GridList","GridListTile","GridListTileBar","IconButton","useStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","gridList","width","height","Dashboard","props","classes","campaignId","location","campaigns","id","campaign","api_url","data","setData","fetchData","result","fetch","then","response","console","log","json","catch","err","Error","impressions","titleBar","title"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD,C,CACA;AACA;;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,kBAAT,QAAmC,2BAAnC;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,OAAOC,UAAP,MAAuB,8BAAvB,C,CACA;;;AAEA,MAAMC,SAAS,GAAGL,UAAU,CAAEM,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,MADL;AAEJC,IAAAA,QAAQ,EAAE,MAFN;AAGJC,IAAAA,cAAc,EAAE,cAHZ;AAIJC,IAAAA,QAAQ,EAAE,QAJN;AAKJC,IAAAA,eAAe,EAAE;AALb,GADiC;AAQvCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAE,GADC;AAERC,IAAAA,MAAM,EAAE;AAFA;AAR6B,CAAZ,CAAD,CAA5B;;AAaA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AAExB,QAAMC,OAAO,GAAGb,SAAS,EAAzB;AAEA,QAAMc,UAAU,GAAGF,KAAK,CAACG,QAAN,CAAeC,SAAf,CAAyBC,EAA5C;AACA,QAAMC,QAAQ,GAAGN,KAAK,CAACG,QAAN,CAAeC,SAAhC;AACA,MAAIG,OAAO,GAAG,iCAAd,CANwB,CAQxB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBhC,QAAQ,CAAC,EAAD,CAAhC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACR,UAAMgC,SAAS,GAAG,YAAY;AAC1B,YAAMC,MAAM,GAAG,MAAMC,KAAK,CAACL,OAAO,GAAC,GAAR,GAAYL,UAAZ,GAAuB,UAAvB,GAAkC,CAAnC,CAAL,CAA2CW,IAA3C,CAAgDC,QAAQ,IAAI;AAC/EC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACE,eAAOA,QAAQ,CAACG,IAAT,EAAP;AACH,OAHoB,EAGjBC,KAHiB,CAGXC,GAAG,IAAI;AACb,cAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACD,OALkB,CAArB;AAMAV,MAAAA,OAAO,CAACE,MAAD,CAAP;AACH,KARD;;AASAD,IAAAA,SAAS;AACZ,GAXI,EAWF,EAXE,CAAT;AAaE,sBACE;AAAK,IAAA,SAAS,EAAET,OAAO,CAACX,IAAxB;AAAA,2BACA,QAAC,QAAD;AAAU,MAAA,SAAS,EAAEW,OAAO,CAACL,QAA7B;AAAuC,MAAA,IAAI,EAAE,GAA7C;AAAA,iBACGmB,OAAO,CAACC,GAAR,CAAYR,IAAZ,CADH,eAEI,QAAC,YAAD;AAAA,+BACI,QAAC,eAAD;AACE,UAAA,KAAK,EAAEA,IAAI,CAACa,WADd;AAEE,UAAA,OAAO,EAAE;AACP/B,YAAAA,IAAI,EAAEW,OAAO,CAACqB,QADP;AAEPC,YAAAA,KAAK,EAAEtB,OAAO,CAACsB;AAFR,WAFX;AAME,UAAA,UAAU,eACR,QAAC,UAAD;AAAY,0BAAa,QAAOf,IAAI,CAACa,WAAY;AAAjD;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD;;GArDQtB,S;UAESX,S;;;KAFTW,S;AAuDT,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n// import 'bootstrap/dist/css/bootstrap.min.css';\r\n// import { Table,Container, Row, Col } from 'react-bootstrap';\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getCampaignDetails } from \"../store/actions/campaign\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n// import StarBorderIcon from '@material-ui/icons/StarBorder';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n    backgroundColor: 'red',\r\n  },\r\n  gridList: {\r\n    width: 500,\r\n    height: 450,\r\n  },\r\n}));\r\nfunction Dashboard(props) {\r\n  \r\n  const classes = useStyles();\r\n  \r\n  const campaignId = props.location.campaigns.id;\r\n  const campaign = props.location.campaigns;\r\n  let api_url = \"http://localhost:4000/campaigns\";\r\n\r\n  //TODO : for store\r\n//   const dispatch = useDispatch();\r\n//   const [campaignDetails, setCampaign] = useState();\r\n//   const campaignData = useSelector((state) => state.campaignState.campaignDetails)\r\n//   useEffect(() => {\r\n//     if (campaignId) {\r\n//         dispatch(getCampaignDetails(campaign, 0))\r\n//     }\r\n// }, [campaignDetails, dispatch])\r\n\r\n\r\nconst [data, setData] = useState([])\r\nuseEffect(() => {\r\n        const fetchData = async () => {\r\n            const result = await fetch(api_url+'/'+campaignId+'?number='+0).then(response => {\r\n              console.log(response);\r\n                return response.json()\r\n            }) .catch(err => {\r\n                throw new Error(err)\r\n              })\r\n            setData(result)\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n    <GridList className={classes.gridList} cols={2.5}>\r\n      {console.log(data)}\r\n        <GridListTile>\r\n            <GridListTileBar\r\n              title={data.impressions}\r\n              classes={{\r\n                root: classes.titleBar,\r\n                title: classes.title,\r\n              }}\r\n              actionIcon={\r\n                <IconButton aria-label={`star ${data.impressions}`}>\r\n                </IconButton>\r\n              }\r\n            />\r\n        </GridListTile>\r\n    </GridList>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}