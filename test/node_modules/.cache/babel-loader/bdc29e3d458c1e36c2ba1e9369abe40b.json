{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_Projects\\\\loblaw-ui-test\\\\test\\\\src\\\\components\\\\dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getCampaignDetails } from \"../store/actions/campaign\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Dashboard(props) {\n  _s();\n\n  const campaignId = props.location.campaigns.id;\n  const campaign = props.location.campaigns;\n  let api_url = \"http://localhost:4000/campaigns\"; //TODO : for store\n  //   const dispatch = useDispatch();\n  //   const [campaignDetails, setCampaign] = useState();\n  //   const campaignData = useSelector((state) => state.campaignState.campaignDetails)\n  //   useEffect(() => {\n  //     if (campaignId) {\n  //         dispatch(getCampaignDetails(campaign, 0))\n  //     }\n  // }, [campaignDetails, dispatch])\n\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await fetch(api_url + '/' + campaignId + '?number=' + 0).then(response => {\n        console.log(response);\n        return response.json();\n      }).catch(err => {\n        throw new Error(err);\n      });\n      setData(result);\n    };\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["D:/React_Projects/loblaw-ui-test/test/src/components/dashboard.js"],"names":["React","useState","useEffect","useRef","useDispatch","useSelector","getCampaignDetails","Dashboard","props","campaignId","location","campaigns","id","campaign","api_url","data","setData","fetchData","result","fetch","then","response","console","log","json","catch","err","Error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,kBAAT,QAAmC,2BAAnC;;;AAGA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AACxB,QAAMC,UAAU,GAAGD,KAAK,CAACE,QAAN,CAAeC,SAAf,CAAyBC,EAA5C;AACA,QAAMC,QAAQ,GAAGL,KAAK,CAACE,QAAN,CAAeC,SAAhC;AACA,MAAIG,OAAO,GAAG,iCAAd,CAHwB,CAKxB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,CAAC,EAAD,CAAhC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACR,UAAMe,SAAS,GAAG,YAAY;AAC1B,YAAMC,MAAM,GAAG,MAAMC,KAAK,CAACL,OAAO,GAAC,GAAR,GAAYL,UAAZ,GAAuB,UAAvB,GAAkC,CAAnC,CAAL,CAA2CW,IAA3C,CAAgDC,QAAQ,IAAI;AAC/EC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACE,eAAOA,QAAQ,CAACG,IAAT,EAAP;AACH,OAHoB,EAGjBC,KAHiB,CAGXC,GAAG,IAAI;AACb,cAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACD,OALkB,CAArB;AAMAV,MAAAA,OAAO,CAACE,MAAD,CAAP;AACH,KARD;;AASAD,IAAAA,SAAS;AACZ,GAXI,EAWF,EAXE,CAAT;AAaE,sBACE;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAnCQV,S;;KAAAA,S;AAqCT,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getCampaignDetails } from \"../store/actions/campaign\";\r\n\r\n\r\nfunction Dashboard(props) {\r\n  const campaignId = props.location.campaigns.id;\r\n  const campaign = props.location.campaigns;\r\n  let api_url = \"http://localhost:4000/campaigns\";\r\n\r\n  //TODO : for store\r\n//   const dispatch = useDispatch();\r\n//   const [campaignDetails, setCampaign] = useState();\r\n//   const campaignData = useSelector((state) => state.campaignState.campaignDetails)\r\n//   useEffect(() => {\r\n//     if (campaignId) {\r\n//         dispatch(getCampaignDetails(campaign, 0))\r\n//     }\r\n// }, [campaignDetails, dispatch])\r\n\r\n\r\nconst [data, setData] = useState([])\r\nuseEffect(() => {\r\n        const fetchData = async () => {\r\n            const result = await fetch(api_url+'/'+campaignId+'?number='+0).then(response => {\r\n              console.log(response);\r\n                return response.json()\r\n            }) .catch(err => {\r\n                throw new Error(err)\r\n              })\r\n            setData(result)\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n  return (\r\n    <div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}